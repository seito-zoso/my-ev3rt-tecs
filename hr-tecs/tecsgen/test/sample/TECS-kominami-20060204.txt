TECSのCDLの文法とgeneratorのパーサ部分についてのレポート
                                                            20060204 小南

->の部分は、20060131のミーティングでの議論の結果をまとめたものである．

->が無い項目は、2006/02/01以降に追加したものである．

各項目のタグの意味は以下の通り

[BUG]      generatorのバグの報告。()内は問題が発生するデータ。
           normal-数字.idlは、文法としては正しいがエラーや例外が発生するもの。
           abnormal-数字.idlは、文法として間違っていて，例外が発生するもの。
           error-数字.idlは、文法として間違っていて，例外が発生しないもの
           （エラーが報告されるものも、報告されないものも含む）。

[ISSUE]    懸案事項。WG内で存在は認識されていること。
[Q]        質問事項。仕様などについて、質問者にとってはっきりしないこと。
[SPEC]     仕様として確認されたこと。暫定的な仕様も含む．
[PROPOSAL] [ISSUE]とされたもの、されないものに関わらず，WG内での議題として提案したいこと。
[COMMENT]  [PROPOSAL]とするまではまとまっていない、個人的な考えなど。

* 1 typedef

** 1.1 [BUG]基本型をtypedefした型を用いて、型をtypedefできない（構文解析エラーになる)
-> generator-20060129.zipでsyntax errorにならなくなった

** 1.2 [ISSUE]typedefされた型は、型名が同一でも依存部により異なる定義である
-> ターゲット依存部で異なるような部分は、Cプリプロセッサで条件指定して処理することを確認した。

* 2 関数頭部
** 2.1 [Q]関数の型にconstを指定できない

** 2.2 [Q]関数の型にポインタ型を指定できない
-> TECSの仕様である

* 3 引数修飾子

** 3.1 [SPEC]引数修飾子のin, out, inout, send, receiveは同時に複数個指定できない。これらは必ずの1個のみを指定する
-> 20060131のミーティングで確認した。

** 3.2 [BUG](eror-1.idl、normal-1.idl)関数の引数に修飾子をつけなくてもエラーにならない引数が無い場合は、引数修飾子がなくてもエラーにしてほしくないが、void以外はエラーにしてほしい
-> 現在のgeneratorでは未対応。今後対応する予定。

** 3.3 [BUG](error-2.idl)count_is()に、in修飾子を指定された仮引数を指定してもエラーにならない
        ER_UINT serial_rea_dat( [in] ID portid, [in] UINT len , [out , count_is(len)] char *buf);
-> 現在のgeneratorでは未対応。今後対応する予定。

** 3.4 [BUG](error-3.idl)size_is()に、out修飾子を指定された仮引数を指定してもエラーにならない
        ER_UINT serial_rea_dat( [in] ID portid, [out] UINT len , [out , size_is(len)] char *buf);
-> 現在のgeneratorでは未対応。今後対応する予定。

** 3.5 [BUG](error-4.idl)ポインタ型でない仮引数に、out修飾子を指定してもエラーにならない
        ER_UINT serial_rea_dat( [in] ID portid, [out] UINT len , [out , size_is(len)] char *buf);
-> 現在のgeneratorでは未対応。今後対応する予定。

** 3.6 [ISSUE]メッセージボックスの受信はTECSとしては逸脱（指定できるが、推奨しない）として扱う
  ER rcv_mbx ( [in] ID mbxid , [out] T_MSG * * ppk_msg );
  ER prcv_mbx ( [in] ID mbxid , [out] T_MSG * * ppk_msg );
  ER trcv_mbx ( [in] ID mbxid , [out] T_MSG * * ppk_msg , [in] TMO tmout );

-> 20060131のミーティングで確認した。
TECSのインターフェースの考え方としては、引数で渡すものは、サイズが固定なもの、または配列の要素数として、プログラム実行時に指定できるものである。
しかしITRON4.0仕様のメールボックスは、メッセージパケットの先頭アドレスを、メッセージヘッダへのメッセージヘッダとして渡している。
メッセージヘッダとしてはサイズが固定でも、本来渡したいものの全体の情報は伝えられない。
この観点から、逸脱として扱うことにした。

** 3.7 [ISSUE]メッセージボックスの送信TECSとしては逸脱（指定できるが、推奨しない）として扱う
   ER snd_mbx ( [in] ID mbxid , [in] T_MSG * pk_msg );
-> メッセージボックスの受信と同じ

** 3.8 [ISSUE]固定長メモリプールの獲得はTECSとしては逸脱（指定できるが、推奨しない）として扱う
   ER get_mpf  ( [in] ID mpfid , [receive(rel_mpf)] VP * p_blk );
   ER pget_mpf ( [in] ID mpfid , [receive(rel_mpf)] VP * p_blk );
   ER tget_mpf ( [in] ID mpfid , [receive(rel_mpf)] VP * p_blk , [in] TMO tmout );
VP自体がtypedefされた(void *)であるので、VP *は二重ポインタを示す
獲得するメモリブロックのサイズは、静的APIで指定されている．
signatureでは獲得する固定長メモリプールのサイズを表現できない？

-> 20060131のミーティングで確認した。
いままでのTECSの仕様に関する議論では，send、receiveで指定するアロケータのようなもの（あるいはそれ自体)を、signatureで指定することは想定していなかった。
具体的な記述方法はcellでのallocatorを記述した結果を元に検討する。

** 3.9 [BUG](normal-2.idl)関数の引数の型にconstを指定できない

* 4 セルタイプ
** 4.1 [BUG](error-6.idl)セルタイプの定義が空だとsyntax error 
** 4.2 [BUG](error-7.idl)セルタイプの定義中のattributeの定義が空だとsyntax error 
** 4.3 [BUG](error-8.idl)セルタイプの定義中のvarの定義が空だとsyntax error 
** 4.4 [BUG](error-9.idl)セルの定義の中が空だとsyntax error

** 4.5 [BUG](abnormal-1.idl)セルタイプで定義されていない何か（識別子のみの存在）と別の定義されていない何か（識別子のみの存在）に対する結合（代入？）で例外が発生する 

** 4.6 [BUG](abnormal-2.idl)セルタイプで定義されていない何か（識別子のみの存在）に対する整数値の代入で例外が発生する
** 4.7 [BUG](abnormal-3.idl)セルタイプの定義で、属性と変数に同一の名前が存在

** 4.8 [BUG](abnormal-4.idl)celltypeの定義で、受け口または呼び口の定義が不完全だとsyntax errorを出した後、例外が発生

* 5 セル

** 5.1 [BUG](error-10.idl)セルの結合の時に、呼び口と受け口のsignatureが異なっていてもエラーにならない

* 6 キャスト
** 6.1 [BUG](abnormal-5.idl)代入の右辺でキャストを指定すると，例外が発生する 

* 7 演算
** 7.1 [BUG](error-11.idl)double型に~(ビット反転演算子)を指定してもエラーにならない

** 7.2 [BUG](error-11.idl)float型に~(ビット反転演算子)を指定してもエラーにならない

* 8 変数、属性、代入

** 8.1 [BUG](error-12.idl)セルの定義において，同じ変数又は属性に複数回代入すると、同一の変数、属性ではなく、同じ名前の変数、属性が重複してだと看做されて、syntax errorになる

* 9 定義方法

** 9.1 [Q]SYSLOG構造体のように、メンバに配列を持っている場合，その配列の要素数を指定する方法は，直接数値で指定する、またはCプリプロセッサを用いる以外に存在しないか?　
-> 関数の引数では配列の要素数を指定できるが、変数や属性として配列を定義したり，構造体のメンバとして配列を定義する場合は、直接数値、またはCプリプロセッサのマクロとして定義する。

* 10 celltype
** 10.1 [Q]celltype TaskMainとcelltype Taskをどのような場合でも結合できるか
この疑問は、TaskMainセルタイプを設けた場合，TaskMainセルは、アプリケーションにより、接続したいセルが変わるため、あらかじめ受け口のcelltypeを特定する仕組みだけでは実用的なレベルでは記述できないのではないかということである。

　考えられる対応策
　1.必要になるつど、新しいTaskMainセルタイプを追加する(一つのアプリケーション
　　に複数の異なるTaskMainセルタイプを持つ)
　2.必要になるつど、TaskMainセルタイプの受け口をを追加する(一つのアプリケー
　　ションに必要になる受け口を持つ)
　3.受け口に対して、どのようなsignatureでも受け付けことのできる指定方法を追加
　　する
　4.条件コンパイルのような仕組みを導入して，セルの接続ごとにsignatureを指定で
　　きるようにする
　5. 上記の各対応をTask -> TaskMain間ではなく、TaskMain -> 各種セル　の間で行う

->  セルの結合の可否はcelltypeではなく、呼び側のセルの呼び口のsignatureと受け側のセルの受け口のsignatureの一致で判断するので，問題ない。

* 11 条件指定
** 11.1 [ISSUE]依存部によりサポートされる（拡張）サービスコールが異なる
-> ターゲット依存部で異なるような部分は、Cプリプロセッサで条件指定して処理することを確認した。

** 11.2 [ISSUE]TOPPERS/JSP 1.4以降，システム時刻の設定にITRON仕様そのままではなく、const修飾子が付く      
ER set_tim ( [in] const SYSTIM * p_systim );

-> 20060131のミーティングでは未検討
Cプリプロセッサの条件指定に、TOPPERS/JSPカーネルのバージョンを指定して記述を試みる．

** 11.3 [ISSUE]size_t　はどこで定義されているべきか?
->  Cプリプロセッサの条件指定を用いて，依存部や開発環境ごとに個別に定義する。


* 12 namespace
** 12.1 [BUG]celltypeなどの指定で、途中までしか書いていなくてエラーになると、何行目でエラーになったか表示されず、原因が分かりにくい

  正しい場合:
  celltype kernel {
      entry jsp1_4_2_sh3_ms7727cp01::kernel kernel;

      attribute { 
        INT TMAX_SUSCNT = 1; /* 強制待ち要求ネスト数の最大値 */
     };
  };


  間違った場合の例1：
  celltype kernel {
      entry jsp1_4_2_sh3_ms7727cp01::kernel kernel;

      attribute { 
        INT TMAX_SUSCNT = 1; /* 強制待ち要求ネスト数の最大値 */

  val: 1
  bnf.y.rb:852:in `on_error': undefined method `val' for "$":String (NoMethodError)
        from /usr/lib/ruby/1.8/racc/parser.rb:102:in `do_parse'
        from bnf.y.rb:830:in `parse'
        from ./generator.rb:34

  間違った場合の例2：
  celltype kernel {
      entry jsp1_4_2_sh3_ms7727cp01::kernel kernel;

      attribute { 
        INT TMAX_SUSCNT = 1; /* 強制待ち要求ネスト数の最大値 */
  }

  val: 1
  bnf.y.rb:852:in `on_error': undefined method `val' for "$":String (NoMethodError)
        from /usr/lib/ruby/1.8/racc/parser.rb:102:in `do_parse'
        from bnf.y.rb:830:in `parse'
        from ./generator.rb:34

  間違った場合の例3：
  celltype kernel {
      entry jsp1_4_2_sh3_ms7727cp01::kernel kernel;

      attribute { 
        INT TMAX_SUSCNT = 1; /* 強制待ち要求ネスト数の最大値 */
  };

  val: 1
  bnf.y.rb:852:in `on_error': undefined method `val' for "$":String (NoMethodError)
        from /usr/lib/ruby/1.8/racc/parser.rb:102:in `do_parse'
        from bnf.y.rb:830:in `parse'
        from ./generator.rb:34

  間違った場合の例4：
  celltype kernel {
      entry jsp1_4_2_sh3_ms7727cp01::kernel kernel;

      attribute { 
        INT TMAX_SUSCNT = 1; /* 強制待ち要求ネスト数の最大値 */
     };
  }

  val: 1
  bnf.y.rb:852:in `on_error': undefined method `val' for "$":String (NoMethodError)
        from /usr/lib/ruby/1.8/racc/parser.rb:102:in `do_parse'
        from bnf.y.rb:830:in `parse'
        from ./generator.rb:34

-> 現在のgeneratorでは未対応。
    

** 12.2 [ISSUE]定義済みのnamespaceで定義されたsignatureなどを指定する場合、トップにある場合と、別のnamespaceの中にある場合で，namespaceの指定方法が異なるのが分かりにくい

　・トップの場合の指定のしかた
　　celltype kernel {
    　entry jsp1_4_2_sh3_ms7727cp01::kernel kernel;

　・別のnamespaceの中にいる場合の指定のしかた
　　namespace j {

　　　celltype kernel {
    　　entry ::jsp1_4_2_sh3_ms7727cp01::kernel kernel;

-> TECSにおいて、namespaceは相対的な位置関係を持つ。異なるnamespaceはトップからの位置を指定しなければならない．この指定方法は仕様である．

* 13 文法外のこと

** 13.1 [BUG](error-13.idl)記述中に二バイト文字（例：空白があると）syntax errorになる。


* 14 文法一般
** 14.1 [SPEC]関数の型に関数へのポインタ型を指定できるか
->　関数の型としては、ポインタ型を指定できない。
    また、TECSの仕様として、関数へのポインタ型は存在しない。

** 14.2 [PROPOSAL]enumを基本型と同じく、typedefできるようにしたい。
型は、typedefとCプリプロセッサの条件指定により、ターゲット、開発環境に依存する部分と汎用的な記述に明確に切り分けられる。
しかし、enumはマクロで表現して、マクロを使用した箇所は必ず前処理を行わなければならない。
前処理が必要な箇所をできるだけ限定、分離できるようにして、見通し良く記述したり，エラー箇所を発見し易くしたい．

** 14.3 [PROPOSAL]呼び口を持たず、受け口だけを持つセルの存在しうるので、セルの定義でが空の場合も、認めてほしい．

** 14.4 [Q]異なる型を持つセルの属性、変数間での代入において、C言語のように型の変換は自動的にを行われるのか。行われるとしたら、その規則はどうなっているのか。そうではなく型が異なれば代入はできないか．

** 14.5 [Q]定数値表現について。CDLの文法として意味が決められているか?　定数の型は何になるか？　l,uを付けれるか?　つけれるならどういう型になるのか？

** 14.6 [Q]型として関数へのポインタ型を指定できるか

** 14.7 [Q]変数、属性のセルタイプの定義で初期化しておらず、セルの定義でも初期化していない場合，「未初期化」の状態になるのか，それともデフォルトの初期値が入るのか．q-1.idl

** 14.8 [Q]NULLはCDLで定義しているか、それともsize_tのように個別にtypedefで定義するのか

** 14.9 [Q]ポートは必ず結合していないといけないか？
これにはセルの動的生成も絡んでくると考えている．
動的生成したセルと既存のセル、または動的生成したセル同士、はたまた既存のセル同士を動的に結合させるとしたら，例えば、あらかじめ空きのポートを用意しておく、少なくとも(generatorは未対応だとしても）モデル上、文法上、は認めるなどの考慮が必要では無いか

** 14.10 [Q]ポートの数は動的に変化してもよいか？
上記に対する別の解として、モデル上、文法上は選択肢になると思う。ただし、現在想定している実装とは合わないであろう。

* 15 コンポーネントを用いた設計について
** 15.1 [ISSUE]関数のパラメータの定数値とする定数マクロは、マクロとしてではなくenumとして定義するべきか
-> サービスコールのパラメータに値として指定するようなもの（関数のインターフェースのように不変なもの-変更するならば、別のインターフェースとして定義したり，バージョンを変えたりすべきもの）は，signatureに関連付けてenumとして記述する。

カーネル構成定数のような、実装ごとに異なる値を取りうるが，プログラム実行時には変更されないものは、セルの属性として扱う．

関数の引数以外の、配列の定義時に指定する要素数のようなものを直接数値で指定したくないならば，Cプリプロセッサのマクロを用いて定義する。


** 15.2 [ISSUE]DEF_EXC, ATT_INI, VATT_TERなどはジェネレータに自動的に出力を任せられないのではないか。なんらかの指定をする手段を考えるべきではないか

** 15.3 [ISSUE]JSPカーネルのsignatureは依存部ごとに定義すべきか?

-> セルの設計に関わる部分であるので、これから色々試みてみてから検討することになった。

** 15.4 [ISSUE]Inline関数はマクロと同じく保留
->  TECSではマクロは定義できないことを確認した．

* 16 コメント

** 16.1 [COMMENT]ライブラリの使用方法について
[requireのような指定で、あるいは指定なしに
これはセル内部の実装に限った方がよいのではないか。セルの外部のインターフェースはCDLで必ず指定するほうが良いと思う
requireはコンパイル時にライブラリとリンクできるようにするための要求（ヒント?）として扱う
requireが指定されていることは、セル外部に見える必要はない
セルの実装に用いるライブラリは、そのセル内部で処理が閉じていること。セルのレベルで、自身が所属するタスクとは異なるタスクに所属する他のセルと何かを共有したり、排他制御が必要になったりしてはいけない．

** 16.2 [COMMENT]タスクのセルと、Main関数のセルと結合
関数を呼び出すという関係ではない
呼出し口、受け口は存在するが，形式的なもの
signatureは、OSで規定された関数の形式をもつ
これはジェネレータが特別に解釈しなければならない
その手がかりとして、属性を用いる

** 16.3 [COMMENT]タスクのセルと、タスク例外ハンドラのセルのセルと結合
カーネルオブジェクトのタスクのセルとタスク例外ハンドラのセルを結合する
この結合は、関連付けされることに意味があり（factory, 静的APIの指定に関係する），関数の呼び出しはされない。
受け口、呼び口のsignatureは形式的なものである
タスク例外ハンドラのセルとタスク例外ハンドラ関数のセルとを結合する

** 16.4 [COMMENT]ID番号に対応するものは番号で識別する、文字列で識別するか
ITRONのサービスコールのインターフェースは番号であるが、プログラミング上は、具体的な番号の割り付けはconfiguratorにまかせ、ソースファイル上ではマクロ名で記述するという考え方である．
今まで通り、割り付けはconfiguratorに任せるのか、その部分までgeneratorが担当するか

** 16.5 [COMMENT]タスクのセル名をそのままconfiguratorに渡す。（全部大文字では無いが)セルのID番号のマクロ名としてもよいだろうか。

** 16.6 [COMMENT]cppで処理することを前提とするので、行頭に#があれば、その行はコメントとする方が都合が良い

** 16.7 [COMMENT]cppで処理することを前提とするので、cppで展開前のファイルの行番号でエラー表示されればうれしい。

** 16.8 [COMMENT]cppで処理することを前提とするので、generarotが標準入力からの入力にも対応したほうが便利だろう

