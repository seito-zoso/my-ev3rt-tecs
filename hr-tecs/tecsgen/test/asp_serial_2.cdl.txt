const int TECS_FALSE=0;
const int TECS_TRUE=1;
const int TECS_E_OK=0;
const int TECS_E_ID=(-18);
const int TECS_E_OBJ=(-41);
const int TECS_E_CTX=(-25);
/* 型宣言 */
/* typedef int32 bool; */
typedef int32 er;			/* エラーコード型 */
typedef unsigned int32 er_uint32;	/* エラーコード型または符号無し32ビット整数型 */
typedef unsigned int32 vp_int;		/* ポインターのサイズを持つ型または整数型 */
typedef int32 tecs_id;			/* ID型 */
typedef void * vp;
/* const変数 */
 /*　
 	初期化 
 	       factoryで指定する
 	       ITRONでは静的APIで初期化ハンドラに指定する
	       受け口関数ではない
	       初期化はセルタイプに対して行うのか?
	       それとも個々のセルに対して行うのか?
	       複数のセルの場合、個々のセルを特定する情報を
	       ジェネレータが与える必要がある
 */
 /*
	割込みハンドラ
		factoryで指定する
		割り込みはセルタイプに対して定義するのか?
		セルに対して定義するのか?
				
		複数のセルの場合、個々のセルを特定する情報を
		ジェネレータが与える必要がある
		
 	コントロールブロックの初期化
		シリアルポートセルの属性、変数の初期化で実現する
 	ポートの出力先はセルの接続を指定したときに定まる
 */
 /****/
/* termiosはダミーの定義 -> 定義しないことにする */
/* syslog構造体用の定義 */
const int TMAX_LOGINFO	= 6;
/*
 * シスログ情報
 */
typedef struct {
	int32	logtype;		/* ログ情報の種別 */
	int32	logtim;			/* ログ時刻 */
	int32	loginfo[TMAX_LOGINFO];	/* その他のログ情報 */
} syslog_t;
/*
struct str_t {
	int32 a[TMAX_LOGINFO];
	int32 b[3];
};
*/
/* タスク */
signature sTask {
	  void main([in]vp_int exinf);	
};
/* 初期化ハンドラ */
signature sInitialize {
	  void hdr([in]vp_int exinf);	
};
/* 割り込みハンドラ */
signature sInterrupt {
	  void hdr(void);	
};
/* 終了処理ハンドラ */
signature sTerminate {
	  void hdr( [in]vp_int exinf );
};
/*  */
signature sGeneral {
	  int hdr( [in]vp_int exinf );
};
/* シスログ本体 */
signature sSysLog {
	  er write( [in] unsigned int32 prio,  [in] syslog_t *p_log);
	  er read( [out] syslog_t *p_log);
	  er_uint32 mask( [in] unsigned int32 logmask,  [in] unsigned int32 lowmask);
};
/* (通信用)ポート */
signature sPort {
 	  er open( void ); /* ポートのオープン */
 	  er close( void ); /* ポートのクローズ */
 	  er_uint32 write( [in , size_is(len)] char *buf,  [in] unsigned int32 len); /* 文字列送信 */
 	  er_uint32 read( [out , size_is(len)] char *buf,  [in] unsigned int32 len); /* 文字列受信 */
 	  er ctl( [in] unsigned int32 ioctl); /* ポートの制御 */
 	  void putch( [in] char ch) ; /* 1文字送信 */
};
signature sSerialPortCallBackLinux {
 	  bool snd( [in] vp_int exinf);/* シリアルポートからの送信可能コールバック */
 	  bool rcv( [in] vp_int exinf); /* シリアルポートからの受信通知コールバック */
};
signature sSIOPort {
 	  void open( [in] tecs_id id , [in] vp_int exinf);
 	  void close( [in] tecs_id id);
 	  bool snd_chr( [in] char c);
 	  int32  rcv_chr( [out] char *c);
 	  void ena_cbr( [in] vp_int cbrtn);
 	  void dis_cbr( [in] vp_int cbrtn);
};
/* const int32 NUM=10; */
/* セルタイプの定義 */
/* const int LOGTASK_INTERVAL =	10;*/	/* デフォルトの動作間隔（ミリ秒）*/
const int LOGTASK_PORTID = 1;	/* システムログを出力するシリアルポート番号 */
const int LOGTASK_STACK_SIZE = 8192;
 [singleton] 
 celltype tLogTask {
	entry sTask eTask;
	call  sSysLog cSysLog;
	call  sPort cPort;
/* 本当はこちらで定義したい */
/*  const int LOGTASK_STACK_SIZE = 8192; */
	attribute {
		int32 interval;
	};
/*
	factory( TASK ,      LOGTASK, { TA_HLNG|TA_ACT, 
				(vp_int) LOGTASK_PORTID, ,main
			LOGTASK_PRIORITY, LOGTASK_STACK_SIZE, NULL );
*/

	FACTORY{
          write( "tecsgen.cfg", "CRE_TSK( LOGTASK, { TA_HLNG|TA_ACT, (vp_int)LOGTASK_PORTID, main, TASK_PRIORITY, LOGTASK_STACK_SIZE, NULL } );" );
        };


};
const int TCNT_SYSLOG_BUFFER = 32;
[singleton] 
celltype tSysLog {
	entry sSysLog eSysLog;
	entry sTerminate eTerm;
	call  sPort cPort;
/* 本来はこちらに定義したい */
/*** tSysLogが公開するインタフェース用定義 ***/
/* const int TCNT_SYSLOG_BUFFER = 32; */
/*
 *  ログ情報の重要度の定義
 */
/* const int LOG_EMERG	=0;*/		/* シャットダウンに値するエラー */
/* const int LOG_ALERT	=1;*/
/* const int LOG_CRIT	=2;*/
/* const int LOG_ERROR	=3;*/		/* システムエラー */
/* const int LOG_WARNING=4;*/		/* 警告メッセージ */
/* const int LOG_NOTICE	=5;*/
/* const int LOG_INFO	=6;*/
/* const int LOG_DEBUG	=7;*/		/* デバッグ用メッセージ */
/*
 *  ログ情報の種別の定義
 *
 *  LOG_TYPE_CYC，LOG_TYPE_ASSERT 以外は，デバッギングインタフェース仕
 *  様と合致している．
 */
/* const int LOG_TYPE_INH	=0x01;*/	/* 割込みハンドラ */
/* const int LOG_TYPE_ISR	=0x02;*/	/* 割込みサービスルーチン */
/* const int LOG_TYPE_CYC	=0x03;*/	/* 周期ハンドラ */
/* const int LOG_TYPE_EXC	=0x04;*/	/* CPU例外ハンドラ */
/* const int LOG_TYPE_TEX	=0x05;*/	/* タスク例外処理ルーチン */
/* const int LOG_TYPE_TSKSTAT	=0x06;*/	/* タスク状態変化 */
/* const int LOG_TYPE_DSP	=0x07;*/	/* ディスパッチャ */
/* const int LOG_TYPE_SVC	=0x08;*/	/* サービスコール */
/* const int LOG_TYPE_COMMENT	=0x09;*/	/* コメント */
/* const int LOG_TYPE_ASSERT	=0x0a;*/	/* アサーションの失敗 */
/* const int LOG_ENTER		=0x00;*/	/* 入口／開始 */
/* const int LOG_LEAVE		=0x80;*/	/* 出口／終了 */
/*****************************************/
	  var {
	  /*
	   *  出力すべきログ情報の重要度（ビットマップ）
	    */
	    unsigned int32	syslog_logmask;			/* ログバッファに記録すべき重要度 */
	    unsigned int32	syslog_lowmask;			/* 低レベル出力すべき重要度 */
	  /*
	   *  ログバッファとそれにアクセスするためのポインタ
	    */
	     syslog_t	syslog_buffer[TCNT_SYSLOG_BUFFER];	/* ログバッファ */
	     unsigned int32	syslog_count;			/* ログバッファ中のログの数 */
	     unsigned int32	syslog_head;			/* 先頭のログの格納位置 */
	     unsigned int32	syslog_tail;			/* 次のログの格納位置 */
	     unsigned int32	syslog_lost;			/* 失われたログの数 */
	  };
/*
	現在は、手で追加する
	factory( INIT_HANDLER ,      TA_HLG, 0, tSyslog_initialize );
	
	factory( TERM_HANDLER ,      TA_HLG, 0, tSyslog_terminate );
*/
	FACTORY{
	  write( "tecsgen.cfg" , "ATT_INI( { TA_HLNG, 0, tSyslog_initialize });" );
	  write( "tecsgen.cfg" , "ATT_TER( { TA_HLNG, 0, tSyslog_terminate });" );
	};
};
[singleton] 
celltype tDummySerialPort {
	entry sPort ePort;
	call  sPort cPort;
};
const int32 SERIAL_BUFSZ = 256;
celltype tSerialPortLinux {
	entry sPort ePort;
	entry sInitialize eInit;
	entry sSerialPortCallBackLinux eSerialPortCallBack;
	entry sGeneral eGen;
	call  sSIOPort cSIOPort;
/*** tSerialPortLinuxが公開するインタフェース用定義 ***/
/*   コールバックルーチンの識別番号 */
/* const unsigned int SIO_ERDY_SND =   1;*/      /* 送信可能コールバック */
/* const unsigned int SIO_ERDY_RCV =   2;*/      /* 受信通知コールバック */
/*
 *  シリアルインタフェースドライバの動作制御用のための定数
 *
 *  以下の定数は，ビット毎に論理和をとって用いる．
 */
/* const unsigned int IOCTL_ECHO	=0x0001;*/		/* 受信した文字をエコーバック */
/*** tSerialPortLinuxが公開しない定義（変数、属性の初期値に用いる） ***/
/*
 *  フローコントロール関係の定義
 */
/* const int STOP	= 23;*/		/* Control-S */
/* const int START	= 21;*/		/* Control-Q */
/* const int IXOFF_STOP	= 64;*/	/* buffer area size to send STOP */
/* const int IXOFF_START	= 128;*/	/* buffer area size to send START */
/* const int32 SERIAL_BUFSZ = 256; */

/* ここまで */
	var {
		bool	init_flag;	/* 初期化済か？ */
		int	in_read_ptr;	/* 受信バッファ読み出しポインタ */
		int	in_write_ptr;	/* 受信バッファ書き込みポインタ */
		int	out_read_ptr;	/* 送信バッファ読み出しポインタ */
		int	out_write_ptr;	/* 送信バッファ書き込みポインタ */
		unsigned int32	ioctl;		/* ioctl による設定内容 */
		bool	send_enabled;	/* 送信をイネーブルしてあるか？ */
		bool	ixon_stopped;	/* STOP を受け取った状態か？ */
		bool	ixoff_stopped;	/* 相手に STOP を送った状態か？ */
		char	ixoff_send;	/* 相手に START/STOP を送るか？ */
		char	in_buffer[SERIAL_BUFSZ]={ 0 };	/* 受信バッファエリア */
		char	out_buffer[SERIAL_BUFSZ]={ 0 };	/* 受信バッファエリア */
	};
	attribute {
		tecs_id	in_semid;	/* 受信バッファ管理用セマフォの ID */
		tecs_id	out_semid;	/* 送信バッファ管理用セマフォの ID */
	};
/* 
 以下の関数は手で独自に追加する
	 factory( INIT_HANDLER ,      TA_HLG, 0, tSerialPort_eInit_hdr );
	 factory( SEM ,   SEM_SERIAL1_IN,  { TA_TPRI, 0, 1 });
	 factory( SEM ,   SEM_SERIAL1_OUT, { TA_TPRI, 1, 1 });
 
*/
	FACTORY{
	  write( "tecsgen.cfg" , "ATT_INI( { TA_HLNG, 0, tSerialPort_eInit_hdr });" );
	  write( "tecsgen.cfg" , "CRE_SEM( SEM_SERIAL1_IN,  { TA_TPRI, 0, 1 } );" );
	  write( "tecsgen.cfg" , "CRE_SEM( SEM_SERIAL1_OUT,  { TA_TPRI, 1, 1 } );" );
	};
};
celltype tSIOPortLinux {
	entry sSIOPort eSIOPort;
	entry sInitialize eInit;
	entry sInterrupt eInt;
	call sSerialPortCallBackLinux cSerialPortCallBack;
	var {
/* SIOPCB */
	     	vp_int  exinf;		/* 拡張情報 */
	     	bool    openflag;		/* オープン済みフラグ */
	     	bool    sendflag;		/* 送信割込みイネーブルフラグ */
	     	bool    getready;		/* 文字を受信した状態 */
	     	bool    putready;		/* 文字を送信できる状態 */
		char   *path;		        /* UNIX 上でのファイル名 */
		int32   fd;		        /* ファイルディスクリプタ */
		/* セルのC言語実装における内部に閉じたデータ構造へのポインタ */
		vp_int  p_indata;
/*
		struct termios	current_term;*/	/* 端末制御情報 */
/*		struct termios	saved_term;    
*/
	};
 /*
 以下の関数は手で独自に追加する
	 factory( INIT_HANDLER ,      TA_HLG, 0, tSIOPortLinux_eInit_hdr );
 	 factory( INTERRUPT_HANDLER , TA_HLG, INHNO_SIO,
 	 tSIOPortLinux_eInt_hdr );
*/
	FACTORY{
	  write( "tecsgen.cfg" , "ATT_INI( { TA_HLNG, 0, tSIOPortLinux_eInit_hdr });" );
	  write( "tecsgen.cfg" , "DEF_INH( INHNO_SIO , { TA_HLNG, tSIOPortLinux_eInt_hdr });" );
	};
};
/* セルの組み上げ記述 */
cell tSIOPortLinux SIOPortLinux;
/** SysLogセル **/
cell tSysLog SysLog;
cell tSerialPortLinux SerialPortLinux;
cell tLogTask LogTask {
/* セルのインタフェースの一部として、公開するマクロなど */
	/* なし　*/
/* 非公開で、変数、属性の初期値に指定できるマクロなど */
/* タスクの優先度の初期値 */
/* const int LOGTASK_PRIORITY =	3;*/	/* デフォルトの初期優先度 */
/* const int	LOGTASK_INTERVAL = 10; */
     cSysLog = SysLog.eSysLog;
     cPort = SerialPortLinux.ePort;
};
/** DummySerialPortセル **/
cell tSerialPortLinux SerialPortLinux;
cell tDummySerialPort DummySerialPort {
     cPort = SerialPortLinux.ePort;
};
cell tSerialPortLinux SerialPortLinux;
/** SysLogセル **/
cell tSysLog SysLog {
	cPort = SerialPortLinux.ePort;
/*

	syslog_buffer = { {0,0,{0}} };
*/
};
/* SerialPortLinuxセル */
cell tSIOPortLinux SIOPortLinux;
cell tSerialPortLinux SerialPortLinux {
	cSIOPort = SIOPortLinux.eSIOPort;
	/* var */
	/* BUG? セルの変数の初期化ができない */
	/* init_flag = 0;*/	/* 初期化済か？ */
	/* in_read_ptr = 0;*/	/* 受信バッファ読み出しポインタ */
	/* in_write_ptr = 0;*/	/* 受信バッファ書き込みポインタ */
	/* out_read_ptr = 0; */	/* 送信バッファ読み出しポインタ */
	/* out_write_ptr = 0; */	/* 送信バッファ書き込みポインタ */
	/* ioctl = 0; */		/* ioctl による設定内容 */
	/* send_enabled = FALSE; */	/* 送信をイネーブルしてあるか？ */
	/* ixon_stopped = FALSE; */	/* STOP を受け取った状態か？ */
	/* ixoff_stopped = FALSE; */	/* 相手に STOP を送った状態か？ */
	/* ixoff_send = FALSE; */	/* 相手に START/STOP を送るか？ */
	/* BUG? 配列の初期化が出来ない */
	/* in_buffer = {0}; */	
	/* in_buffer[0] = 0; */	/* 受信バッファエリア */
	/* out_buffer = { 0 }; */	/* 受信バッファエリア */
	/* attribute */
/* これはgeneratorでは実現できない(コンフィギュレータが決める値であるため)ので、初期可搬銅鑼で設定しなければならない */
/*	in_semid = SERIAL_RCV_SEM1;*/
/*	out_semid =  SERIAL_SND_SEM1;*/
/*
	factory(CRE_SEM , SERIAL_RCV_SEM1, { TA_TPRI, 0, 1 });
	factory(CRE_SEM , SERIAL_SND_SEM1, { TA_TPRI, 1, 1 });
*/
};
/* SIOPortLinuxセル */
/**** cell tSerialPortLinux SerialPortLinux; ****/
cell tSIOPortLinux SIOPortLinux {
	cSerialPortCallBack = SerialPortLinux.eSerialPortCallBack;
	/*   コールバックルーチンの識別番号 */
/*
	const int SIO_ERDY_SND =1;
	const int SIO_ERDY_RCV =2;
*/
     	/* exinf = FALSE; */		/* 拡張情報 */
 	/* openflag = FALSE; */		/* オープン済みフラグ */
	/* sendflag = FALSE; */		/* 送信割込みイネーブルフラグ */
	/* getready = FALSE; */		/* 文字を受信した状態 */
	/* putready = FALSE; */		/* 文字を送信できる状態 */
	/* attr */
/*
 	reg_base = ST16C_CHB;
	lcr_val = LCR_VAL; 
	dlm_val = DLM_VAL; 
	dll_val = DLL_VAL; 
	pinter_val = PINTER_PINT7E;
*/
/*
      siopinib = { {ST16C_CHB, LCR_VAL, DLM_VAL, DLL_VAL, PINTER_PINT7E},
 		   {ST16C_CHA, LCR_VAL, DLM_VAL, DLL_VAL, PINTER_PINT6E}
 		   };
*/
/*	
	 factory( INIT_HANDLER ,      TA_HLG, 0, tSIOPortLinux_SIOPortLinux_eInit_hdr );
*/

};
